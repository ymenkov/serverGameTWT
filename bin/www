#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('FullServer:server');
var http = require('http');
var gameObjects = require('./gameConfig');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);




/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//////////////////
playerId=0;
clients = [];
players = [];

function getPlayerIdbyIp(ip){
    for(var i = 0; i < players.length; i++){
        if(players[i].ip == ip)
            return players[i].id;
    }
    return 999;
}

WebSocketServer = new require('ws');
var wor= require('./world');
id = -1;

webSocketServer = new WebSocketServer.Server({
  port: 8081
});

webSocketServer.on('connection', function(ws) {
    console.dir(players);
    var playerId = getPlayerIdbyIp(ws.upgradeReq.connection.remoteAddress);
    var clientId = clients.push({ws: ws, playerId: playerId });

  console.log("новое соединение " + playerId + " : " + clientId);
    ws.send(JSON.stringify({type:"INFO",config:gameObjects}));



  ws.on('message', function(message) {
    mes = JSON.parse(message);
      console.log(mes)
      switch(mes.make){
          case 'start':
              if(playerId === 0) {
                  w.startWorld();
                  for (var i = 0; i <= clients.length - 1; i++)
                      clients[i].ws.send(JSON.stringify({type: "EVENT", info: "Игра начала / ускорилась"}));
              }
              break;

          case 'create':
              //if(w.worldStart && playerId == mes.playerId)
              var info = w.buyObject(mes.type,playerId,mes.coord);
              if( (typeof info) == 'string' )
                ws.send(JSON.stringify({type: "EVENT", info: info}));
              break;

          case 'sell':
              w.sellObject(mes.objId, playerId);
              break;

          case 'up':
              w.upLvl(mes);
              break;
      }
  });

  ws.on('close', function() {
    console.log('соединение закрыто ' + id);
    clients.splice(clientId, 1);
  });

    ws.on('disconnect',function(){
        console.log('соединение disconnect ' + id);
        clients.splice(clientId, 1);
    });

});

w = new wor.World(12,20);
// w.createPlayer("Инокентий", 0);
// w.createPlayer("222222", 1);
console.log("Серевер работает 8081");

setInterval(function () {
    clients.forEach(function (client, clientId) {
        try {
            if (client.ws && client.ws.send) {
                client.ws.send(JSON.stringify(w.getAll(client.playerId)));
            }
        } catch(e){
            client.ws.close();
            clients.splice(clientId, 1);
            console.error(e.message);
        }
    });
}, 300);


